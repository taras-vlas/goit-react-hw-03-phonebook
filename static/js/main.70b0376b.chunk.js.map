{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.jsx","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","event","target","value","setState","handleSubmit","preventDefault","props","onAddContact","className","styles","Form","onSubmit","this","Label","Input","type","pattern","title","required","onChange","Button","Component","ListContact","contacts","onDeleteContact","List","map","contact","List_item","List_button","onClick","id","useStyles","createUseStyles","display","marginBottom","width","fontSize","color","cursor","font","marginTop","borderRadius","border","outline","boxShadow","Filter","onChangeFilter","classes","defaultProps","App","filter","addContact","includes","alert","uuidv4","prevState","changeFilter","getinputContacts","normalizedFilter","toLowerCase","deleteContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","console","log","prevProps","nextContacts","setItem","stringify","inputContacts","length","ContactList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70b0376b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__2opdX\",\"List_item\":\"ContactList_List_item__37oaH\",\"List_button\":\"ContactList_List_button__nlndn\"};","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from \"./ContactForm.module.css\";\n\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.onAddContact({ ...this.state });\n\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n        <form className={styles.Form} onSubmit={this.handleSubmit}>\n          <label className={styles.Label}>\n            Name\n            <input\n                className={styles.Input}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                value={this.state.name}\n                onChange={this.handleChange}\n            />\n          </label>\n          <label className={styles.Label}>\n            Number\n            <input\n                className={styles.Input}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n                required\n                value={this.state.number}\n                onChange={this.handleChange}\n            />\n          </label>\n            <button className={styles.Button} type=\"submit\">\n              Add contact\n            </button>\n        </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactForm;\n\n\n\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from \"./ContactList.module.css\";\n\nconst ListContact = ({ contacts, onDeleteContact }) => (\n  <ul className={styles.List}>\n    {contacts.map((contact) => (\n      <li className = {styles.List_item} key={contact.id}>\n        {\"• \" + contact.name + \":  \" + contact.number}\n        {\n          <button\n            className={styles.List_button}\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onDeleteContact(contact.id)}\n          >\n            Delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\n\nListContact.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n  })),\n}\nexport default ListContact;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\n\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  Label:{\n    display: 'inline-block',\n    marginBottom: 16,\n    width: 200,\n    fontSize: 16,\n    color: '#171718',\n    cursor: 'pointer',\n    }, \n         \n  Input: {\n    color: '#171718',\n    font: 'inherit',\n    fontSize: '0.9rem',\n    marginTop: 6,\n    borderRadius: 4,\n    border: '1px solid #9e9d9d',\n    width: 200,\n    outline: 0,\n      '&:focus': {\n        border: '2px solid blue',\n        boxShadow: '1px 1px 3px 1px rgba(41, 107, 250, 0.14)',\n        },\n    }\n});\n\n\n// Приймаємо Подію з поля фільтра    в props: value і onChangeFilter            const Filter = ({ value, onChangeFilter }) => { \nfunction Filter({ value, onChangeFilter }) {\n    const classes = useStyles();\n \n  return (\n    <div className = {classes.Label}>\n      Find contacts by name\n      <input className = {classes.Input}\n             type=\"text\"\n             value={value}\n             onChange={onChangeFilter}\n             name=\"filter\"                                     //і'мя inputa\n             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n             required\n      />\n    </div>\n  );\n}\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onchangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { v4 as uuidv4 } from \"uuid\";\nimport './styles.css';\n\nclass App extends Component {\n\tstate = {\n    contacts: [\n        {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n        {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n        {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n        {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n      ],\n    filter: \"\",\n    //showModal: false,\n  };\n\n\n  /***  Події з контактами телефонної книги в localStorage */\n  \n  componentDidMount() {\n    //Фаза монтування після рендеринга компонента,  Забирання з localStorage\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);  // для преобразования JSON обратно в объект.\n    \n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n    console.log(\"componentDidMount()\");\n  }\n\n  \n  componentDidUpdate(prevProps, prevState) {\n    // Визов фази з моменту оновлення компонента \n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n    \n    // Порівняння стейтів\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts)); //для преобразования значений, объектов, массивов в строку формата JSON \n    }\n    console.log(\"componentDidUpdate()\");\n  }\n\n\n  componentWillUnmount() {\n    //Визов перед видаленням компонента з DOM\n    console.log(\"componentWillUnmount()\");\n  }\n\n\n  addContact = (contacts) => {\n    const inputName = this.state.contacts\n      .map((contact) => contact.name)\n      .includes(contacts.name);    //значення true чи false\n    \n    if (inputName) {      // якщо є дублікат\n      alert(`${contacts.name} is already in contacts`);\n      } else {\n      const contact = {\n        ...contacts,\n        id: uuidv4(),     // даємо id\n      };\n      \n      this.setState((prevState) => ({\n        contacts: [...prevState.contacts, contact],\n        //contacts: [...prevContacts, contact],\n      }));\n    }\n  };\n\n   \n    // Подію на полі фільтра пишемо в стейт\n  // changeFilter = (event) => {                              \n  //   this.setState({ filter: event.target.value });  //або\n  changeFilter = ({ target: { value } }) => {\n    this.setState({ filter: value });\n  };\n\n    \n    // Фільтрує та повертає результат фільтра\n  getinputContacts = () => {\n    const { contacts, filter } = this.state;\n    \n    const normalizedFilter = filter.toLowerCase();\n    \n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };   \n\n\n  render() {\n    const { filter } = this.state;\n\n    const inputContacts = this.getinputContacts(); //(5) [{…}, {…}, {…}, {…}, {…}]\n      console.log('inputContacts', inputContacts, 'inputContacts.length',inputContacts.length) \n    \n    return (\n        <div>\n          <h1>Phonebook</h1>\n\n          <ContactForm onAddContact={this.addContact} />\n          <h2>Contacts</h2>\n        \n          {/* {inputContacts.length > 0 && (    ***знято!!! если искать по сочетанию букв по которому нет совпадений - пропадает инпут.  */} \n            <Filter value={filter} onChangeFilter={this.changeFilter} />\n          {/* )}           */}\n            <ContactList\n              contacts={inputContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          \n        </div>\n    );\n  };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nimport 'modern-normalize/modern-normalize.css'; // npm install modern-normalize\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__3GSyx\",\"Label\":\"ContactForm_Label__lzVTl\",\"Input\":\"ContactForm_Input__CEgRS\",\"Button\":\"ContactForm_Button__34pkk\"};"],"sourceRoot":""}